/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Helper {
  export type TokenBalanceStruct = {
    token: AddressLike;
    balance: BigNumberish;
  };

  export type TokenBalanceStructOutput = [token: string, balance: bigint] & {
    token: string;
    balance: bigint;
  };
}

export interface SwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToken"
      | "allSupported"
      | "allSupportedBalances"
      | "allTokens"
      | "isActive"
      | "isSupported"
      | "owner"
      | "parseSignature"
      | "removeToken"
      | "renounceOwnership"
      | "swapTokens"
      | "tokenBalance"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddToken"
      | "OwnershipTransferred"
      | "RemoveToken"
      | "SwapTokens"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allSupported",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allSupportedBalances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allSupportedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapTokensEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    toToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    fromToken: string,
    toToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    fromToken: string;
    toToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Swap extends BaseContract {
  connect(runner?: ContractRunner | null): Swap;
  waitForDeployment(): Promise<this>;

  interface: SwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToken: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  allSupported: TypedContractMethod<[], [string[]], "view">;

  allSupportedBalances: TypedContractMethod<
    [],
    [Helper.TokenBalanceStructOutput[]],
    "view"
  >;

  allTokens: TypedContractMethod<[], [string[]], "view">;

  isActive: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  isSupported: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  parseSignature: TypedContractMethod<
    [signature: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;

  removeToken: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swapTokens: TypedContractMethod<
    [
      fromTokenAddress: AddressLike,
      toTokenAddress: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  tokenBalance: TypedContractMethod<
    [token: AddressLike],
    [Helper.TokenBalanceStructOutput],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allSupported"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "allSupportedBalances"
  ): TypedContractMethod<[], [Helper.TokenBalanceStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSupported"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parseSignature"
  ): TypedContractMethod<
    [signature: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapTokens"
  ): TypedContractMethod<
    [
      fromTokenAddress: AddressLike,
      toTokenAddress: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenBalance"
  ): TypedContractMethod<
    [token: AddressLike],
    [Helper.TokenBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddToken"
  ): TypedContractEvent<
    AddTokenEvent.InputTuple,
    AddTokenEvent.OutputTuple,
    AddTokenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveToken"
  ): TypedContractEvent<
    RemoveTokenEvent.InputTuple,
    RemoveTokenEvent.OutputTuple,
    RemoveTokenEvent.OutputObject
  >;
  getEvent(
    key: "SwapTokens"
  ): TypedContractEvent<
    SwapTokensEvent.InputTuple,
    SwapTokensEvent.OutputTuple,
    SwapTokensEvent.OutputObject
  >;

  filters: {
    "AddToken(address)": TypedContractEvent<
      AddTokenEvent.InputTuple,
      AddTokenEvent.OutputTuple,
      AddTokenEvent.OutputObject
    >;
    AddToken: TypedContractEvent<
      AddTokenEvent.InputTuple,
      AddTokenEvent.OutputTuple,
      AddTokenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveToken(address)": TypedContractEvent<
      RemoveTokenEvent.InputTuple,
      RemoveTokenEvent.OutputTuple,
      RemoveTokenEvent.OutputObject
    >;
    RemoveToken: TypedContractEvent<
      RemoveTokenEvent.InputTuple,
      RemoveTokenEvent.OutputTuple,
      RemoveTokenEvent.OutputObject
    >;

    "SwapTokens(address,address,uint256)": TypedContractEvent<
      SwapTokensEvent.InputTuple,
      SwapTokensEvent.OutputTuple,
      SwapTokensEvent.OutputObject
    >;
    SwapTokens: TypedContractEvent<
      SwapTokensEvent.InputTuple,
      SwapTokensEvent.OutputTuple,
      SwapTokensEvent.OutputObject
    >;
  };
}
