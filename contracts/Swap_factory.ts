/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "./common";
import type { Swap, SwapInterface } from "./types/Swap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "AddToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "RemoveToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "SwapTokens",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "allSupported",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "allSupportedBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Helper.TokenBalance[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "allTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "isSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "parseSignature",
    outputs: [
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "removeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "toTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "swapTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "tokenBalance",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Helper.TokenBalance",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611edf8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c578063d48bfca711610066578063d48bfca7146101ee578063eedc966a1461020a578063f2fde38b1461023a578063f596d10a14610256576100cf565b8063715018a6146101965780638da5cb5b146101a05780639f8a13d7146101be576100cf565b80632ff682a3146100d45780633a892452146100f25780633d4890a91461010e5780634f129c531461012c5780635fa7b5841461015c5780636ff97f1d14610178575b600080fd5b6100dc610288565b6040516100e99190611313565b60405180910390f35b61010c60048036038101906101079190611406565b610471565b005b610116610927565b604051610123919061154f565b60405180910390f35b61014660048036038101906101419190611571565b610ba2565b60405161015391906115b9565b60405180910390f35b61017660048036038101906101719190611571565b610bf8565b005b610180610c92565b60405161018d919061154f565b60405180910390f35b61019e610d20565b005b6101a8610d34565b6040516101b591906115e3565b60405180910390f35b6101d860048036038101906101d39190611571565b610d5d565b6040516101e591906115b9565b60405180910390f35b61020860048036038101906102039190611571565b610dba565b005b610224600480360381019061021f9190611571565b610eb7565b604051610231919061162d565b60405180910390f35b610254600480360381019061024f9190611571565b610f76565b005b610270600480360381019061026b9190611789565b610ff9565b60405161027f93929190611807565b60405180910390f35b606060003073ffffffffffffffffffffffffffffffffffffffff16633d4890a96040518163ffffffff1660e01b8152600401600060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103009190611916565b90506000815167ffffffffffffffff81111561031f5761031e61165e565b5b60405190808252806020026020018201604052801561035857816020015b6103456111ab565b81526020019060019003908161033d5790505b50905060005b825181101561046857600083828151811061037c5761037b61195f565b5b60200260200101519050600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103c691906115e3565b602060405180830381865afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040791906119a3565b905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001828152508585815181106104475761044661195f565b5b60200260200101819052505050508080610460906119ff565b91505061035e565b50809250505090565b61047a86610ba2565b801561048b575061048a85610ba2565b5b6104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190611aa4565b60405180910390fd5b6000841161050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490611b10565b60405180910390fd5b60008690506000869050858273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161055191906115e3565b602060405180830381865afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059291906119a3565b10156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90611b7c565b60405180910390fd5b858173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161060d91906115e3565b602060405180830381865afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e91906119a3565b101561068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068690611be8565b60405180910390fd5b60008060006106e187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610ff9565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff1663d505accf33308c8c8689896040518863ffffffff1660e01b815260040161072c9796959493929190611c17565b600060405180830381600087803b15801561074657600080fd5b505af115801561075a573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161079b93929190611c86565b6020604051808303816000875af11580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190611ce9565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3308b6040518363ffffffff1660e01b815260040161081a929190611d16565b6020604051808303816000875af1158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d9190611ce9565b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd30338c6040518463ffffffff1660e01b815260040161089b93929190611c86565b6020604051808303816000875af11580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de9190611ce9565b507f744e9e5f97188d6d6f986d7c601b03e28c26b77f724d462aa0c1b95c58068b6e8b8b8b60405161091293929190611c86565b60405180910390a15050505050505050505050565b6060600060018054905067ffffffffffffffff81111561094a5761094961165e565b5b6040519080825280602002602001820160405280156109785781602001602082028036833780820191505090505b5090506000805b600180549050811015610abf576000600182815481106109a2576109a161195f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503073ffffffffffffffffffffffffffffffffffffffff16639f8a13d7826040518263ffffffff1660e01b8152600401610a0891906115e3565b602060405180830381865afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611ce9565b15610aab5780848381518110610a6257610a6161195f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508280610aa7906119ff565b9350505b508080610ab7906119ff565b91505061097f565b5060008167ffffffffffffffff811115610adc57610adb61165e565b5b604051908082528060200260200182016040528015610b0a5781602001602082028036833780820191505090505b50905060005b600180549050811015610b9857838181518110610b3057610b2f61195f565b5b6020026020010151828281518110610b4b57610b4a61195f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610b90906119ff565b915050610b10565b5080935050505090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610c00611061565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f4eb129c82dcd3eedb52df2b0e6fb4cfa41ac64ee9d63ff081acbb1877e85d79b81604051610c8791906115e3565b60405180910390a150565b60606001805480602002602001604051908101604052809291908181526020018280548015610d1657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ccc575b5050505050905090565b610d28611061565b610d3260006110df565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b610dc2611061565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe473c74f34be27c1464d6624f14a0d7fd4e301cbfa29c3eba425d378c8a7ebe081604051610eac91906115e3565b60405180910390a150565b610ebf6111ab565b600082905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610eff91906115e3565b602060405180830381865afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906119a3565b905060405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018281525092505050919050565b610f7e611061565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe490611db1565b60405180910390fd5b610ff6816110df565b50565b60008060006041845114611042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103990611e1d565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6110696111a3565b73ffffffffffffffffffffffffffffffffffffffff16611087610d34565b73ffffffffffffffffffffffffffffffffffffffff16146110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d490611e89565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061123282611207565b9050919050565b61124281611227565b82525050565b6000819050919050565b61125b81611248565b82525050565b6040820160008201516112776000850182611239565b50602082015161128a6020850182611252565b50505050565b600061129c8383611261565b60408301905092915050565b6000602082019050919050565b60006112c0826111db565b6112ca81856111e6565b93506112d5836111f7565b8060005b838110156113065781516112ed8882611290565b97506112f8836112a8565b9250506001810190506112d9565b5085935050505092915050565b6000602082019050818103600083015261132d81846112b5565b905092915050565b6000604051905090565b600080fd5b600080fd5b61135281611227565b811461135d57600080fd5b50565b60008135905061136f81611349565b92915050565b61137e81611248565b811461138957600080fd5b50565b60008135905061139b81611375565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126113c6576113c56113a1565b5b8235905067ffffffffffffffff8111156113e3576113e26113a6565b5b6020830191508360018202830111156113ff576113fe6113ab565b5b9250929050565b60008060008060008060a087890312156114235761142261133f565b5b600061143189828a01611360565b965050602061144289828a01611360565b955050604061145389828a0161138c565b945050606061146489828a0161138c565b935050608087013567ffffffffffffffff81111561148557611484611344565b5b61149189828a016113b0565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006114d88383611239565b60208301905092915050565b6000602082019050919050565b60006114fc826114a0565b61150681856114ab565b9350611511836114bc565b8060005b8381101561154257815161152988826114cc565b9750611534836114e4565b925050600181019050611515565b5085935050505092915050565b6000602082019050818103600083015261156981846114f1565b905092915050565b6000602082840312156115875761158661133f565b5b600061159584828501611360565b91505092915050565b60008115159050919050565b6115b38161159e565b82525050565b60006020820190506115ce60008301846115aa565b92915050565b6115dd81611227565b82525050565b60006020820190506115f860008301846115d4565b92915050565b6040820160008201516116146000850182611239565b5060208201516116276020850182611252565b50505050565b600060408201905061164260008301846115fe565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116968261164d565b810181811067ffffffffffffffff821117156116b5576116b461165e565b5b80604052505050565b60006116c8611335565b90506116d4828261168d565b919050565b600067ffffffffffffffff8211156116f4576116f361165e565b5b6116fd8261164d565b9050602081019050919050565b82818337600083830152505050565b600061172c611727846116d9565b6116be565b90508281526020810184848401111561174857611747611648565b5b61175384828561170a565b509392505050565b600082601f8301126117705761176f6113a1565b5b8135611780848260208601611719565b91505092915050565b60006020828403121561179f5761179e61133f565b5b600082013567ffffffffffffffff8111156117bd576117bc611344565b5b6117c98482850161175b565b91505092915050565b6000819050919050565b6117e5816117d2565b82525050565b600060ff82169050919050565b611801816117eb565b82525050565b600060608201905061181c60008301866117dc565b61182960208301856117dc565b61183660408301846117f8565b949350505050565b600067ffffffffffffffff8211156118595761185861165e565b5b602082029050602081019050919050565b60008151905061187981611349565b92915050565b600061189261188d8461183e565b6116be565b905080838252602082019050602084028301858111156118b5576118b46113ab565b5b835b818110156118de57806118ca888261186a565b8452602084019350506020810190506118b7565b5050509392505050565b600082601f8301126118fd576118fc6113a1565b5b815161190d84826020860161187f565b91505092915050565b60006020828403121561192c5761192b61133f565b5b600082015167ffffffffffffffff81111561194a57611949611344565b5b611956848285016118e8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061199d81611375565b92915050565b6000602082840312156119b9576119b861133f565b5b60006119c78482850161198e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a0a82611248565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a3c57611a3b6119d0565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e73206e6f7420737570706f72746564000000000000000000000000600082015250565b6000611a8e601483611a47565b9150611a9982611a58565b602082019050919050565b60006020820190508181036000830152611abd81611a81565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000611afa602083611a47565b9150611b0582611ac4565b602082019050919050565b60006020820190508181036000830152611b2981611aed565b9050919050565b7f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000600082015250565b6000611b66601a83611a47565b9150611b7182611b30565b602082019050919050565b60006020820190508181036000830152611b9581611b59565b9050919050565b7f496e73756666696369656e74207377617020746f6b656e2062616c616e636500600082015250565b6000611bd2601f83611a47565b9150611bdd82611b9c565b602082019050919050565b60006020820190508181036000830152611c0181611bc5565b9050919050565b611c1181611248565b82525050565b600060e082019050611c2c600083018a6115d4565b611c3960208301896115d4565b611c466040830188611c08565b611c536060830187611c08565b611c6060808301866117f8565b611c6d60a08301856117dc565b611c7a60c08301846117dc565b98975050505050505050565b6000606082019050611c9b60008301866115d4565b611ca860208301856115d4565b611cb56040830184611c08565b949350505050565b611cc68161159e565b8114611cd157600080fd5b50565b600081519050611ce381611cbd565b92915050565b600060208284031215611cff57611cfe61133f565b5b6000611d0d84828501611cd4565b91505092915050565b6000604082019050611d2b60008301856115d4565b611d386020830184611c08565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d9b602683611a47565b9150611da682611d3f565b604082019050919050565b60006020820190508181036000830152611dca81611d8e565b9050919050565b7f496e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b6000611e07601883611a47565b9150611e1282611dd1565b602082019050919050565b60006020820190508181036000830152611e3681611dfa565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e73602083611a47565b9150611e7e82611e3d565b602082019050919050565b60006020820190508181036000830152611ea281611e66565b905091905056fea26469706673582212209c4369493f0dea239b848b7e528d25cfe2e334516b4299705ac9a00013c4f23b64736f6c63430008120033";

type SwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swap_factory extends ContractFactory {
  constructor(...args: SwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Swap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Swap_factory {
    return super.connect(runner) as Swap_factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapInterface {
    return new Interface(_abi) as SwapInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Swap {
    return new Contract(address, _abi, runner) as unknown as Swap;
  }
}
